// Generated by dojo-bindgen on Wed, 12 Jun 2024 06:17:57 +0000. Do not modify this file manually.
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using Dojo;
using Dojo.Starknet;
using Dojo.Torii;
using Newtonsoft.Json;
using UnityEngine;

namespace Game
{
    // Model definition for `dojo_starter::models::player::Player` model
    public class Player: ModelInstance {
        [ModelField("player")]
        public FieldElement player;

        [ModelField("character")]
        public Character character;

        [ModelField("score")]
        public ulong score;

        // Start is called before the first frame update
        void Start() {
        }

        // Update is called once per frame
        void Update() {
        }
    }
    
    // Type definition for `core::byte_array::ByteArray` struct
    [Serializable]
    public struct ByteArray {
        public string[] data;
        public FieldElement pending_word;
        public uint pending_word_len;
    }

    // Type definition for `dojo_starter::models::player::Character` enum
    public abstract record Character() {
        public record Horseman() : Character;
        public record Magician() : Character;

        public static readonly Type[] Characters = typeof(Character).GetNestedTypes(BindingFlags.Public)
            .OrderBy(t => t.MetadataToken)
            .ToArray();

        public static int GetIndex(Character value) {
            return Array.IndexOf(Characters, value.GetType());
        }

    }

    // Type definition for `core::option::Option::<core::integer::u32>` enum
    public abstract record Option<A>() {
        public record Some(A value) : Option<A>;
        public record None() : Option<A>;

        private static readonly IReadOnlyDictionary<Type, int> TypeIndices = typeof(Option<A>)
            .GetNestedTypes(BindingFlags.Public)
            .OrderBy(t => t.MetadataToken)
            .Select((type, index) => new { type, index })
            .ToDictionary(t => t.type, t => t.index);

        public static int GetIndex(Option<A> value)
        {
            return TypeIndices[value.GetType()];
        }
    }


}

namespace System.Runtime.CompilerServices
{ 
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal static class IsExternalInit{}
}